/*! person 03-06-2015 */
App.ProfileController = Ember.Controller.extend({
    sortedEducations: function() {
        var a = this.get("model").get("educations"), b = [], c = [], d = [];
        a.forEach(function(a) {
            a.get("dateFrom") && !a.get("dateTo") ? b.push(a) : a.get("dateTo") ? c.push(a) : d.push(a);
        });
        var e = Ember.ArrayProxy.create({
            content: Ember.A(b)
        }), f = Ember.ArrayProxy.create({
            content: Ember.A(c)
        }), g = Ember.ArrayProxy.create({
            content: Ember.A(d)
        }), h = e.sortBy("from_year", "from_month").reverse(), i = f.sortBy("to_year", "to_month").reverse(), j = g.sortBy("school");
        return h.concat(i, j);
    }.property("content.@each.educations"),
    sortedExperiences: function() {
        var a = this.get("model").get("experiences"), b = [], c = [], d = [];
        a.forEach(function(a) {
            a.get("fromDate") && !a.get("toDate") ? b.push(a) : a.get("toDate") ? c.push(a) : d.push(a);
        });
        var e = Ember.ArrayProxy.create({
            content: Ember.A(b)
        }), f = Ember.ArrayProxy.create({
            content: Ember.A(c)
        }), g = Ember.ArrayProxy.create({
            content: Ember.A(d)
        }), h = e.sortBy("from_year", "from_month").reverse(), i = f.sortBy("to_year", "to_month").reverse(), j = g.sortBy("company");
        return h.concat(i, j);
    }.property("content.@each.experiences"),
    sortedCertifications: function() {
        var a = this.get("model").get("certifications"), b = [], c = [];
        a.forEach(function(a) {
            a.get("expireDate") ? b.push(a) : c.push(a);
        });
        var d = Ember.ArrayProxy.create({
            content: Ember.A(c)
        }), e = Ember.ArrayProxy.create({
            content: Ember.A(b)
        }), f = e.sortBy("expire_year", "expire_month", "expire_day").reverse(), g = d.sortBy("name");
        return g.concat(f);
    }.property("content.@each.certifications"),
    sortedSkills: function() {
        var a = this.get("model").get("skills"), b = Ember.ArrayProxy.create({
            content: Ember.A(a)
        });
        return b.sortBy("description");
    }.property("content.@each.skills"),
    showSkillsLegend: function() {
        var a = this.get("model").get("skills"), b = !1;
        return a.some(function(a) {
            "true" == a.get("willing_to_help") && (b = !0);
        }), b;
    }.property("content.@each.skills"),
    sortedHobbies: function() {
        var a = this.get("model").get("hobbies"), b = Ember.ArrayProxy.create({
            content: Ember.A(a)
        });
        return b.sortBy("name");
    }.property("content.@each.hobbies")
}), App.PresenceSerializer = DS.ActiveModelSerializer.extend(DS.EmbeddedRecordsMixin, {
    attrs: {
        certifications: {
            embedded: "always"
        },
        educations: {
            embedded: "always"
        },
        experiences: {
            embedded: "always"
        },
        skills: {
            embedded: "always"
        },
        hobbies: {
            embedded: "always"
        }
    }
}), App.Presence = DS.Model.extend(Ember.Validations.Mixin, {
    first_name: DS.attr("string"),
    last_name: DS.attr("string"),
    phone_number: DS.attr("string"),
    email: DS.attr("string"),
    position: DS.attr("string"),
    location: DS.attr("string"),
    picture: DS.attr("string"),
    tenant_id: DS.attr("string"),
    tenant_name: DS.attr("string"),
    about: DS.attr("string"),
    certifications: DS.hasMany("certification"),
    educations: DS.hasMany("education"),
    experiences: DS.hasMany("experience"),
    skills: DS.hasMany("skill"),
    hobbies: DS.hasMany("hobbies"),
    phone_number_link: function() {
        var a = this.get("phone_number") || "";
        return App.returnSafeTelHref(this.phoneToNumeric(a));
    }.property("phone_number"),
    email_link: function() {
        var a = this.get("email") || "";
        return App.returnSafeMailToHref(a);
    }.property("email"),
    matchingUserAndPresence: function() {
        var a = App.get("user"), b = App.get("presence");
        return a && b && a.id === b.id;
    }.property("App.user", "App.presence"),
    phoneToNumeric: function(a) {
        for (var b = {
            A: "2",
            B: "2",
            C: "2",
            D: "3",
            E: "3",
            F: "3",
            G: "4",
            H: "4",
            I: "4",
            J: "5",
            K: "5",
            L: "5",
            M: "6",
            N: "6",
            O: "6",
            P: "7",
            Q: "7",
            R: "7",
            S: "7",
            T: "8",
            U: "8",
            V: "8",
            W: "9",
            X: "9",
            Y: "9",
            Z: "9"
        }, c = "", d = a.toLocaleUpperCase().replace(" ", ""), e = d.length, f = 0; e > f; f++) c += b[d[f]] ? b[d[f]] : d[f];
        return c;
    },
    pictureLink: function() {
        var a = App.normalizeRelativePath("/assets/person_114x114.png");
        return this.get("picture") && "" !== this.get("picture") ? this.get("picture") : a;
    }.property("picture"),
    rowId: function() {
        return "elementId_" + this.get("id");
    }.property("id")
}), App.Certification = DS.Model.extend(Ember.Validations.Mixin, {
    name: DS.attr("string"),
    description: DS.attr("string"),
    achieved_day: DS.attr("number", {
        defaultValue: 0
    }),
    achieved_month: DS.attr("number", {
        defaultValue: 0
    }),
    achieved_year: DS.attr("number", {
        defaultValue: 0
    }),
    expire_day: DS.attr("number", {
        defaultValue: 0
    }),
    expire_month: DS.attr("number", {
        defaultValue: 0
    }),
    expire_year: DS.attr("number", {
        defaultValue: 0
    }),
    achievedDate: function() {
        var a = this.get("hasAchievedDay"), b = this.get("hasAchievedMonth"), c = this.get("hasAchievedYear");
        if (c) {
            var d = this.get("achieved_year");
            if (b) {
                var e = this.get("achieved_month");
                return a ? this.translateMonthName(e) + " " + this.get("achieved_day") + ", " + d : this.translateMonthName(e) + " " + d;
            }
            return d;
        }
        return null;
    }.property("achieved_day", "achieved_month", "achieved_year"),
    expireDate: function() {
        var a = this.get("hasExpireDay"), b = this.get("hasExpireMonth"), c = this.get("hasExpireYear");
        if (c) {
            var d = this.get("expire_year");
            if (b) {
                var e = this.get("expire_month");
                return a ? this.translateMonthName(e) + " " + this.get("expire_day") + ", " + d : this.translateMonthName(e) + " " + d;
            }
            return d;
        }
        return null;
    }.property("expire_day", "expire_month", "expire_year"),
    duration: function() {
        var a = this.get("achievedDate"), b = this.get("expireDate");
        return a && b ? a + " - " + b : !a && b ? this.translateExpire() + ": " + b : a && !b ? this.translateAchieved() + ": " + a : "";
    }.property("achievedDate", "expireDate"),
    hasAchievedDay: function() {
        var a = this.get("achieved_day");
        return a && a > 0;
    }.property("achieved_day"),
    hasAchievedMonth: function() {
        var a = this.get("achieved_month");
        return a && a > 0;
    }.property("achieved_month"),
    hasAchievedYear: function() {
        var a = this.get("achieved_year");
        return a && a > 0;
    }.property("achieved_year"),
    hasExpireDay: function() {
        var a = this.get("expire_day");
        return a && a > 0;
    }.property("expire_day"),
    hasExpireMonth: function() {
        var a = this.get("expire_month");
        return a && a > 0;
    }.property("expire_month"),
    hasExpireYear: function() {
        var a = this.get("expire_year");
        return a && a > 0;
    }.property("expire_year"),
    translateMonthName: function(a) {
        return Ember.I18n.t("system.monthname." + a);
    },
    translateAchieved: function() {
        return Ember.I18n.t("system.literal.achieved");
    },
    translateExpire: function() {
        return Ember.I18n.t("system.literal.expire");
    },
    rowId: function() {
        return "elementId_" + this.get("id");
    }.property("id")
}), App.Education = DS.Model.extend(Ember.Validations.Mixin, {
    school: DS.attr("string"),
    level: DS.attr("string"),
    major: DS.attr("string"),
    minor: DS.attr("string"),
    description: DS.attr("string"),
    from_month: DS.attr("number", {
        defaultValue: 0
    }),
    from_year: DS.attr("number", {
        defaultValue: 0
    }),
    to_month: DS.attr("number", {
        defaultValue: 0
    }),
    to_year: DS.attr("number", {
        defaultValue: 0
    }),
    dateFrom: function() {
        var a = this.get("hasFromMonth"), b = this.get("hasFromYear");
        if (b) {
            var c = this.get("from_year");
            return a ? this.translateMonthName(this.get("from_month")) + " " + c : c;
        }
        return null;
    }.property("from_month", "from_year"),
    dateRange: function() {
        var a = this.get("dateFrom"), b = this.get("dateTo");
        return a && b ? a + " - " + b : !a && b ? this.translateTo() + ": " + b : a && !b ? a + " - " + this.translatePresent() : "";
    }.property("dateFrom", "dateTo"),
    dateTo: function() {
        var a = this.get("hasToMonth"), b = this.get("hasToYear");
        if (b) {
            var c = this.get("to_year");
            return a ? this.translateMonthName(this.get("to_month")) + " " + c : c;
        }
        return null;
    }.property("to_month", "to_year"),
    hasFromMonth: function() {
        var a = this.get("from_month");
        return a && a > 0;
    }.property("from_month"),
    hasFromYear: function() {
        var a = this.get("from_year");
        return a && a > 0;
    }.property("from_year"),
    hasLevel: function() {
        return void 0 !== this.get("level") && "" !== this.get("level");
    }.property("level"),
    hasMajor: function() {
        return void 0 !== this.get("major") && "" !== this.get("major");
    }.property("major"),
    hasMinor: function() {
        return void 0 !== this.get("minor") && "" !== this.get("minor");
    }.property("minor"),
    hasToMonth: function() {
        var a = this.get("to_month");
        return a && a > 0;
    }.property("to_month"),
    hasToYear: function() {
        var a = this.get("to_year");
        return a && a > 0;
    }.property("to_year"),
    rowId: function() {
        return "elementId_" + this.get("id");
    }.property("id"),
    specialization: function() {
        var a = "";
        return this.get("hasLevel") && (a += this.get("level")), this.get("hasMajor") && this.get("hasLevel") && (a += ", "), 
        this.get("hasMajor") && (a += this.get("major")), this.get("hasMinor") && (this.get("hasLevel") || this.get("hasMajor")) && (a += ", "), 
        this.get("hasMinor") && (a = a + this.translateMinorIn() + " " + this.get("minor")), 
        a;
    }.property("level", "major", "minor"),
    translateMonthName: function(a) {
        return Ember.I18n.t("system.monthname." + a);
    },
    translatePresent: function() {
        return Ember.I18n.t("system.literal.Present");
    },
    translateTo: function() {
        return Ember.I18n.t("system.literal.To");
    },
    translateMinorIn: function() {
        return Ember.I18n.t("system.literal.MinorIn");
    }
}), App.Experience = DS.Model.extend(Ember.Validations.Mixin, {
    company: DS.attr("string"),
    job_title: DS.attr("string"),
    location: DS.attr("string"),
    description: DS.attr("string"),
    from_month: DS.attr("string"),
    from_year: DS.attr("string"),
    to_month: DS.attr("string"),
    to_year: DS.attr("string"),
    rowId: function() {
        return "elementId_" + this.get("id");
    }.property("id"),
    hasLocation: function() {
        return void 0 !== this.get("location") && "" !== this.get("location");
    }.property("location"),
    fromDate: function() {
        var a = void 0 !== this.get("from_month") && this.get("from_month") > 0, b = void 0 !== this.get("from_year") && this.get("from_year") > 0;
        return a && b ? Ember.I18n.t("system.monthname." + this.get("from_month")) + " " + this.get("from_year") : !a && b ? this.get("from_year") : b ? void 0 : null;
    }.property("from_year", "from_month"),
    toDate: function() {
        var a = void 0 !== this.get("to_month") && this.get("to_month") > 0, b = void 0 !== this.get("to_year") && this.get("to_year") > 0;
        return a && b ? Ember.I18n.t("system.monthname." + this.get("to_month")) + " " + this.get("to_year") : !a && b ? this.get("to_year") : b ? void 0 : null;
    }.property("to_year", "to_month"),
    durationAndLocation: function() {
        var a = "", b = this.get("fromDate"), c = this.get("toDate");
        return b && (a += b), !b && c && (a = a + Ember.I18n.t("system.literal.To") + ": "), 
        b && c && (a += " - "), b && !c && (a = a + " - " + Ember.I18n.t("system.literal.Present")), 
        c && (a += c), this.get("hasLocation") && (b || c) && (a += " | "), this.get("hasLocation") && (a += this.get("location")), 
        a;
    }.property("fromDate", "toDate")
}), App.Skill = DS.Model.extend(Ember.Validations.Mixin, {
    description: DS.attr("string"),
    willing_to_help: DS.attr("string"),
    showWillingToHelp: function() {
        return "true" === this.get("willing_to_help") ? !0 : null;
    }.property("willing_to_help"),
    rowId: function() {
        return "skill_" + this.get("id");
    }.property("id")
}), App.Hobby = DS.Model.extend(Ember.Validations.Mixin, {
    name: DS.attr("string"),
    rowId: function() {
        return "hobby_" + this.get("id");
    }.property("id")
}), App.ProfileRoute = App.AuthenticatedRoute.extend({
    model: function(a) {
        return this.store.fetchById("presence", a.presence_id);
    },
    setupController: function(a, b) {
        App.setDisplayPresence(b), a.set("model", b);
    }
});