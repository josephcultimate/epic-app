/*! person 21-04-2015 */
App.PresenceSerializer = DS.ActiveModelSerializer.extend(DS.EmbeddedRecordsMixin, {
    attrs: {
        educations: {
            embedded: "always"
        },
        experiences: {
            embedded: "always"
        }
    }
}), App.Presence = DS.Model.extend(Ember.Validations.Mixin, {
    first_name: DS.attr("string"),
    last_name: DS.attr("string"),
    phone_number: DS.attr("string"),
    email: DS.attr("string"),
    position: DS.attr("string"),
    location: DS.attr("string"),
    picture: DS.attr("string"),
    tenant_id: DS.attr("string"),
    tenant_name: DS.attr("string"),
    about: DS.attr("string"),
    educations: DS.hasMany("education"),
    experiences: DS.hasMany("experience"),
    phone_number_link: function() {
        var a = this.get("phone_number") || "";
        return this.phoneToNumeric(a);
    }.property("phone_number"),
    phoneToNumeric: function(a) {
        for (var b = {
            A: "2",
            B: "2",
            C: "2",
            D: "3",
            E: "3",
            F: "3",
            G: "4",
            H: "4",
            I: "4",
            J: "5",
            K: "5",
            L: "5",
            M: "6",
            N: "6",
            O: "6",
            P: "7",
            Q: "7",
            R: "7",
            S: "7",
            T: "8",
            U: "8",
            V: "8",
            W: "9",
            X: "9",
            Y: "9",
            Z: "9"
        }, c = "", d = a.toLocaleUpperCase().replace(" ", ""), e = d.length, f = 0; e > f; f++) c += b[d[f]] ? b[d[f]] : d[f];
        return c;
    }
}), App.Education = DS.Model.extend(Ember.Validations.Mixin, {
    school: DS.attr("string"),
    level: DS.attr("string"),
    major: DS.attr("string"),
    minor: DS.attr("string"),
    description: DS.attr("string"),
    hasLevel: function() {
        return void 0 !== this.get("level") && "" !== this.get("level");
    }.property("level"),
    hasMajor: function() {
        return void 0 !== this.get("major") && "" !== this.get("major");
    }.property("major"),
    hasMinor: function() {
        return void 0 !== this.get("minor") && "" !== this.get("minor");
    }.property("minor"),
    specialization: function() {
        var a = "";
        return this.get("hasLevel") && (a += this.get("level")), this.get("hasMajor") && this.get("hasLevel") && (a += ", "), 
        this.get("hasMajor") && (a += this.get("major")), this.get("hasMinor") && (this.get("hasLevel") || this.get("hasMajor")) && (a += ", "), 
        this.get("hasMinor") && (a = a + "Minor in " + this.get("minor")), a;
    }.property("level", "major", "minor")
}), App.Experience = DS.Model.extend(Ember.Validations.Mixin, {
    company: DS.attr("string"),
    job_title: DS.attr("string"),
    location: DS.attr("string"),
    description: DS.attr("string")
}), App.ProfileRoute = App.AuthenticatedRoute.extend({
    model: function(a) {
        return this.store.fetchById("presence", a.presence_id);
    },
    setupController: function(a, b) {
        App.set("presence", b), a.set("model", b);
    }
});