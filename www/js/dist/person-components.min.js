/*! person 05-06-2015 */
App.SearchBarComponent = Ember.Component.extend({
    needs: [ "component:search-result" ],
    KEY_DOWN: 40,
    KEY_ENTER: 13,
    KEY_ESCAPE: 27,
    KEY_UP: 38,
    BOUNCE_DELAY: 300,
    INITIAL_BLUR_DELAY: 300,
    INCREMENTAL_BLUR_DELAY: 100,
    STATE_S0: 0,
    STATE_S1: 1,
    STATE_S2: 2,
    STATE_S3: 3,
    STATE_S4: 4,
    MAX_DATA_SIZE: 15,
    MAX_DISPLAY_SIZE: 6,
    MIN_SEARCH_TEXT: 2,
    MIN_RESULT_INDEX: 0,
    DEFAULT_RESULT_INDEX: -1,
    activeIndex: this.DEFAULT_RESULT_INDEX,
    blur: function() {
        this.set("isBlurring", !0);
        var a = this.get("forceBlur"), b = this.get("keepFocus");
        b ? this.htmlSearchFocus() : (this.set("hasFocus", !1), a && this.htmlSearchBlur()), 
        this.set("forceBlur", !1), this.set("keepFocus", !1), this.set("isWidgetAction", !1), 
        this.set("isBlurring", !1);
    },
    blurShouldDelay: function() {
        return this.get("isBlurring") ? !1 : this.isDestroying || this.isDestroyed ? !1 : this.get("isWorking") ? !0 : (this.blur(), 
        !1);
    },
    classNames: [ "navbar-form", "navbar-right", "search-container" ],
    classNameBindings: [ "isExpanded:expanded", "isLogged:logged" ],
    delay: function(a, b) {
        Ember.run.later(a, b);
    },
    delayedBlur: function() {
        if (this.blurShouldDelay()) {
            var a = this;
            this.delay(function() {
                a.delayedBlur();
            }, a.INCREMENTAL_BLUR_DELAY);
        }
    },
    delayedBlurBegin: function(a) {
        if (a || this.blurShouldDelay()) {
            var b = this;
            this.delay(function() {
                b.delayedBlur();
            }, b.INITIAL_BLUR_DELAY);
        }
    },
    displayTextS0: function() {
        return Ember.I18n.t("system.search.placeholder");
    },
    displayTextS1: function() {
        return Ember.I18n.t("system.search.placeholder.expanded");
    },
    doSearchCancel: function() {
        var a = this.get("searchText");
        a ? this.doSearchClear() : (this.set("forceBlur", !0), this.delayedBlurBegin(!1));
    },
    doSearchClear: function() {
        this.set("searchText", ""), this.set("searchResults", []);
    },
    doSearchEnter: function() {
        this.set("hasFocus", !0), this.doSearchExecute();
    },
    doSearchExecute: function() {
        var a = this.get("searchState"), b = (this.get("searchText") || "").trim();
        a == this.STATE_S3 && this.doSearchRequest(b);
    },
    doSearchExit: function() {
        this.delayedBlurBegin(!0);
    },
    doSearchRequest: function(a) {
        this.set("isWorking", !0), this.set("searchResults", []), this.setActiveIndex(this.DEFAULT_RESULT_INDEX);
        var b = {
            searchText: a
        }, c = App.PostRequest.create({
            endpointRoute: "/api/presences/search",
            data: JSON.stringify(b)
        }), d = App.post(c);
        d.then(this.onSearchSuccess(), this.onSearchError());
    },
    doSelectIndex: function(a) {
        var b = this.get("searchResults"), c = this.get("activeIndex");
        if (a !== c) {
            if (c > this.DEFAULT_RESULT_INDEX && c < b.length) {
                var d = b[c];
                d.set("isActive", !1);
            }
            if (a > this.DEFAULT_RESULT_INDEX && a < b.length) {
                var e = b[a];
                e.set("isActive", !0), this.setActiveIndex(a), this.htmlEnsureVisible(a);
            }
        }
    },
    doTransitionToProfile: function(a) {
        var b = this.get("targetObject");
        b.send("transitionToProfile", a), this.doSearchClear(), this.set("forceBlur", !0), 
        this.set("keepFocus", !1), this.blur();
    },
    hasFocus: !1,
    hasVisibleSearchResults: function() {
        var a = this.get("searchState"), b = this.get("searchResults");
        return a == this.STATE_S3 && b && b.length > 0;
    }.property("searchResults", "searchState"),
    htmlEnsureVisible: function(a) {
        var b = $(this.$().children()[1]), c = b[0], d = b.children()[a], e = c.scrollTop, f = c.clientHeight, g = d.offsetTop, h = d.clientHeight, i = e > g, j = g + h > e + f;
        i ? c.scrollTop = g : j && (c.scrollTop = g + h - f);
    },
    htmlSearchBlur: function() {
        this.$().find("#search").blur();
    },
    htmlSearchFocus: function() {
        this.$().find("#search").focus();
    },
    isCollapsed: function() {
        var a = this.get("searchState");
        return a == this.STATE_S0 || a == this.STATE_S4;
    }.property("searchState"),
    isExpanded: function() {
        var a = this.get("searchState");
        return a == this.STATE_S1 || a == this.STATE_S2 || a == this.STATE_S3;
    }.property("searchState"),
    isExpandedDirty: function() {
        var a = this.get("searchState"), b = this.get("isWorking");
        return !b && (a == this.STATE_S2 || a == this.STATE_S3);
    }.property("searchState", "isWorking"),
    isLogged: function() {
        var a = App.get("session_token");
        return "undefined" != typeof a && null !== a && "Bearer None" !== a;
    }.property("App.session_token"),
    isWidgetAction: !1,
    keepFocus: !1,
    keyDown: function(a) {
        var b = a.which || a.keyCode, c = this.get("searchResults"), d = this.get("activeIndex"), e = d;
        if (b === this.KEY_UP ? d > this.MIN_RESULT_INDEX && (e = d - 1) : b === this.KEY_DOWN && d < c.length - 1 && (e = d + 1), 
        d !== e) this.doSelectIndex(e), a.preventDefault(); else if (b === this.KEY_ENTER) {
            if (d > this.DEFAULT_RESULT_INDEX && d < c.length) {
                var f = c[d];
                this.doTransitionToProfile(f.get("id"));
            }
            a.preventDefault();
        } else b === this.KEY_ESCAPE && (this.doSearchCancel(), a.preventDefault());
    },
    placeholderText: function() {
        var a = this.get("hasFocus");
        return a ? this.get("displayTextS1")() : this.get("displayTextS0")();
    }.property("hasFocus"),
    onSearchSuccess: function() {
        var a = this;
        return function(b) {
            a.set("isWorking", !1);
            var c = [];
            if (b.presences) {
                var d = b.presences, e = d.length;
                for (i = 0; i < e; i++) c.push(Ember.Object.create(d[i])), c[i].set("isActive", 0 === i), 
                c[i].set("index", i);
                e > 0 && a.setActiveIndex(0);
            }
            a.set("searchResults", c);
        };
    },
    onSearchError: function() {
        var a = this;
        return function() {
            a.set("isWorking", !1), a.set("keepFocus", !1), a.set("searchResults", []);
        };
    },
    onSearchTextChanged: function() {
        Ember.run.debounce(this, this.doSearchExecute, this.BOUNCE_DELAY);
    }.observes("searchText"),
    searchResults: [],
    searchState: function() {
        var a = this.get("hasFocus"), b = (this.get("searchText") || "").trim();
        return a || "" !== b ? a && "" === b ? this.STATE_S1 : (this.set("searchResults", []), 
        a && "" !== b ? b.length < this.MIN_SEARCH_TEXT ? this.STATE_S2 : this.STATE_S3 : this.STATE_S4) : this.STATE_S0;
    }.property("hasFocus", "searchText"),
    searchText: "",
    setActiveIndex: function(a) {
        this.set("activeIndex", a);
    },
    actions: {
        searchClear: function() {
            this.set("isWidgetAction", !0), this.set("keepFocus", !0), this.doSearchClear();
        },
        searchEnter: function() {
            this.set("isWidgetAction", !1), this.set("keepFocus", !1), this.doSearchEnter();
        },
        searchExit: function() {
            this.set("isWidgetAction", !1), this.set("keepFocus", !1), this.doSearchExit();
        },
        selectIndex: function(a) {
            this.set("keepFocus", !1), this.doSelectIndex(a);
        },
        transitionToProfile: function(a) {
            this.set("isWidgetAction", !0), this.set("keepFocus", !1), this.doTransitionToProfile(a);
        },
        transitionToProfileByIndex: function() {
            this.set("isWidgetAction", !0), this.set("keepFocus", !1);
            var a = this.get("activeIndex");
            if (a !== this.DEFAULT_RESULT_INDEX) {
                var b = this.get("searchResults") || [];
                b.length > a && this.doTransitionToProfile(b[a].get("id"));
            }
        }
    }
}), App.SearchResultComponent = Ember.Component.extend({
    MARK_PRE: "<span class='matching-search-text'>",
    MARK_POST: "</span>",
    displayName: function() {
        var a = this.get("data"), b = this.get("searchText"), c = a ? a.get("first_name") + " " + a.get("last_name") : "";
        return this.markText(c, b, this.MARK_PRE, this.MARK_POST);
    }.property("data"),
    markText: function(a, b, c, d) {
        for (var e = [], f = new RegExp(b, "gi"); f.test(a); ) e.push(f.lastIndex);
        var g = e.length;
        if (0 === g) return a;
        var h = "", j = [], k = b.length, l = a, m = l.length;
        for (i = g - 1; i >= 0; i--) i < g - 1 ? j.push(l.substring(e[i], e[i + 1] - k)) : e[i] < m && j.push(l.substring(e[i], m)), 
        h = l.substring(e[i] - k, e[i]), j.push(c + h + d), 0 === i && j.push(l.substring(0, e[i] - k));
        return j.reverse().join("");
    },
    mouseEnter: function() {
        var a = this.get("data"), b = this.get("targetObject");
        b.send("selectIndex", a.get("index"));
    },
    pictureLink: function() {
        var a = this.get("data"), b = App.normalizeRelativePath("/assets/person_40x40.png");
        return a && a.get("picture") ? a.get("picture") : b;
    }.property("data"),
    resultClass: function() {
        var a = this.get("data");
        return "list-group-item" + (a.get("isActive") ? " active" : "");
    }.property("data.isActive"),
    rowId: function() {
        var a = this.get("data");
        return "searchResult_" + a.get("id");
    }.property("data"),
    actions: {
        transitionToProfile: function() {
            var a = this.get("data"), b = this.get("targetObject");
            b.send("transitionToProfile", a.get("id"));
        }
    }
});