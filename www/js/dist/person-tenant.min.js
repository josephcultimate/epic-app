/*! person 21-04-2015 */
App.TenantController = Ember.Controller.extend({
    _enable: function(a, b) {
        return this.set("errorMessage", null), a.set("enabled", b), a.save();
    },
    actions: {
        disable: function(a) {
            var b = this;
            return this._enable(a, !1).then(function() {
                b.transitionToRoute("tenants");
            }, function(a) {
                b.set("errorMessage", a.responseJSON.error.message);
            });
        },
        enable: function(a) {
            var b = this;
            this._enable(a, !0).then(function() {
                b.transitionToRoute("tenants");
            }, function(a) {
                b.set("errorMessage", a.responseJSON.error.message);
            });
        }
    }
}), App.TenantsCreateController = Ember.Controller.extend({
    recordSaved: !1,
    actions: {
        create: function() {
            var a = this;
            a.set("recordSaved", !1), a.set("errorMessage", null), a.tenant.set("name", App.trimString(a.tenant.get("name"))), 
            a.tenant.set("alias", App.trimString(a.tenant.get("alias"))), a.tenant.set("preferred_locale", App.trimString(a.tenant.get("preferred_locale"))), 
            a.tenant.validate().then(function() {
                a.tenant.save().then(function() {
                    a.set("name", null), a.set("alias", null), a.set("preferred_locale", null), a.set("recordSaved", !0), 
                    a.transitionToRoute("tenants");
                }, function(b) {
                    a.set("errorMessage", b.responseJSON.error.message), a.set("recordSaved", !1);
                });
            }, function() {
                a.set("errorMessage", a.tenant.get("errors.name") + " " + a.tenant.get("errors.alias"));
            });
        },
        reset: function() {
            this.tenant.set("name", null), this.tenant.set("alias", null), this.tenant.set("preferred_locale", null), 
            this.set("errorMessage", null);
        }
    }
}), App.Tenant = DS.Model.extend(Ember.Validations.Mixin, {
    name: DS.attr("string"),
    alias: DS.attr("string"),
    created_at: DS.attr("date"),
    enabled: DS.attr("boolean"),
    preferred_locale: DS.attr("string"),
    rowId: function() {
        return "listItem_" + this.get("id");
    }.property("id"),
    editId: function() {
        return "editTenant_" + this.get("id");
    }.property("id")
}), App.Tenant.reopen({
    validations: {
        name: {
            presence: {
                message: "Name is required"
            },
            length: {
                minimum: 5
            }
        },
        alias: {
            presence: {
                message: "Alias is required"
            }
        }
    }
}), App.TenantsRoute = App.AuthenticatedRoute.extend({
    model: function() {
        return this.store.fetchAll("tenant");
    }
}), App.TenantsIndexRoute = App.AuthenticatedRoute.extend({
    model: function() {
        return this.modelFor("tenants");
    }
}), App.TenantsEnabledRoute = App.AuthenticatedRoute.extend({
    _applyFilter: function(a) {
        return a.get("enabled") === !0;
    },
    model: function() {
        return this.store.filter("tenant", this._applyFilter);
    },
    renderTemplate: function(a) {
        this.render("tenants/index", {
            controller: a
        });
    }
}), App.TenantsDisabledRoute = App.AuthenticatedRoute.extend({
    _applyFilter: function(a) {
        return a.get("enabled") === !1;
    },
    model: function() {
        return this.store.filter("tenant", this._applyFilter);
    },
    renderTemplate: function(a) {
        this.render("tenants/index", {
            controller: a
        });
    }
}), App.TenantsCreateRoute = App.AuthenticatedRoute.extend({
    model: function() {
        return this.store.createRecord("tenant", {
            enabled: !0,
            created_at: new Date()
        });
    },
    setupController: function(a, b) {
        a.set("tenant", b), a.set("recordSaved", !1), a.set("errorMessage", null), a.send("reset");
    },
    actions: {
        willTransition: function(a) {
            var b = this.controller.get("recordSaved");
            if (b === !1) if (confirm("Are you sure you want to abandon progress?")) {
                var c = this.get("currentModel");
                c.deleteRecord();
            } else a.abort();
        }
    }
}), App.TenantRoute = App.AuthenticatedRoute.extend({
    model: function(a) {
        return this.store.fetchById("tenant", a.tenant_id);
    }
});